name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  packages:
    name: Build Packages (${{ matrix.triplet }})
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - triplet: linux-x86_64
            runner: ubuntu-latest
          - triplet: macos-universal
            runner: macos-latest
          - triplet: windows-x64
            runner: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies (Linux)
        if: matrix.triplet == 'linux-x86_64'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build gcc g++ pkg-config
        shell: bash

      - name: Install dependencies (macOS)
        if: matrix.triplet == 'macos-universal'
        run: |
          brew update
          brew install ninja pkg-config
        shell: bash

      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@v3

      - name: Setup MSVC environment
        if: matrix.triplet == 'windows-x64'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Configure (Linux/macOS)
        if: matrix.triplet != 'windows-x64'
        run: |
          build_dir="build/package-${{ matrix.triplet }}"
          extra_args=()
          if [[ "${{ matrix.triplet }}" == "macos-universal" ]]; then
            extra_args+=(-DCMAKE_OSX_ARCHITECTURES=arm64;x86_64)
          fi
          cmake -S . -B "${build_dir}" \
            -G Ninja \
            -DMODBUS_BUILD_SHARED=ON \
            -DMODBUS_BUILD_STATIC=OFF \
            -DCMAKE_BUILD_TYPE=Release \
            "${extra_args[@]}"
        shell: bash

      - name: Configure (Windows)
        if: matrix.triplet == 'windows-x64'
        run: |
          cmake -S . -B build/package-${{ matrix.triplet }} `
            -G Ninja `
            -DMODBUS_BUILD_SHARED=ON `
            -DMODBUS_BUILD_STATIC=OFF `
            -DCMAKE_BUILD_TYPE=Release
        shell: pwsh

      - name: Build (Linux/macOS)
        if: matrix.triplet != 'windows-x64'
        run: cmake --build build/package-${{ matrix.triplet }} --config Release
        shell: bash

      - name: Build (Windows)
        if: matrix.triplet == 'windows-x64'
        run: cmake --build build/package-${{ matrix.triplet }} --config Release
        shell: pwsh

      - name: Determine version (Linux/macOS)
        if: matrix.triplet != 'windows-x64'
        run: |
          version=$(grep -E '^ModbusCore_VERSION:STATIC=' build/package-${{ matrix.triplet }}/CMakeCache.txt | cut -d= -f2)
          echo "MODBUS_VERSION=${version}" >> "${GITHUB_ENV}"
        shell: bash

      - name: Determine version (Windows)
        if: matrix.triplet == 'windows-x64'
        run: |
          $cache = Get-Content -Path "build/package-${{ matrix.triplet }}/CMakeCache.txt"
          $entry = $cache | Where-Object { $_ -like 'ModbusCore_VERSION:STATIC=*' }
          if (-not $entry) { throw 'ModbusCore_VERSION not found in cache.' }
          $version = $entry.Split('=')[-1]
          echo "MODBUS_VERSION=$version" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Package archive (Linux/macOS)
        if: matrix.triplet != 'windows-x64'
        run: |
          mkdir -p dist/artifacts
          stage_dir="dist/stage/modbuscore-${MODBUS_VERSION}-${{ matrix.triplet }}"
          archive_path="dist/artifacts/modbuscore-${MODBUS_VERSION}-${{ matrix.triplet }}.tar.gz"
          scripts/ci/create_release_package.sh \
            --extra scripts/install-from-archive.sh \
            "build/package-${{ matrix.triplet }}" \
            "${stage_dir}" \
            "${archive_path}"
        shell: bash

      - name: Package archive (Windows)
        if: matrix.triplet == 'windows-x64'
        run: |
          $stage = "dist\stage\modbuscore-$env:MODBUS_VERSION-${{ matrix.triplet }}"
          $archive = "dist\artifacts\modbuscore-$env:MODBUS_VERSION-${{ matrix.triplet }}.zip"
          cmake --install "build/package-${{ matrix.triplet }}" --prefix $stage
          Copy-Item -Path "scripts/install-from-archive.ps1" -Destination $stage -Force
          New-Item -ItemType Directory -Path (Split-Path -Parent $archive) -Force | Out-Null
          if (Test-Path $archive) { Remove-Item $archive }
          Compress-Archive -Path (Join-Path $stage '*') -DestinationPath $archive
        shell: pwsh

      - name: Upload package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: modbuscore-${{ env.MODBUS_VERSION }}-${{ matrix.triplet }}
          path: dist/artifacts/*
          if-no-files-found: error

  release:
    name: Publish Release
    needs: packages
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Extract changelog entry
        id: changelog
        env:
          TAG: ${{ github.ref_name }}
        run: |
          NOTES=$(python <<'PY'
          import os
          import re

          tag = os.environ["TAG"]
          with open("CHANGELOG.md", "r", encoding="utf-8") as fh:
              text = fh.read()

          pattern = rf"## \\[{re.escape(tag)}\\](.*?)(\\n## \\[|\\Z)"
          match = re.search(pattern, text, re.S)
          if match:
              print(match.group(1).strip())
          else:
              print(f"Release {tag}")
          PY
          )
          {
            echo 'notes<<EOF'
            echo "${NOTES}"
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Download package artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          body: ${{ steps.changelog.outputs.notes }}
          files: release-artifacts/**/* 
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
