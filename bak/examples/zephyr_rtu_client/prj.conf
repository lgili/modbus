# Copyright (c) 2025
# SPDX-License-Identifier: Apache-2.0

# =============================================================================
# Zephyr Project Configuration
# =============================================================================
# This file configures Zephyr kernel and subsystems for Modbus RTU client.
# Adjust settings based on your hardware (RAM/ROM constraints, peripherals).
# =============================================================================

# -----------------------------------------------------------------------------
# KERNEL CONFIGURATION
# -----------------------------------------------------------------------------

# Main thread stack size (default 1024 is sufficient for this example)
CONFIG_MAIN_STACK_SIZE=2048

# System workqueue stack size (for k_work_submit)
# Increase if Modbus polling requires more stack
CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE=2048

# Enable thread name support (for debugging)
CONFIG_THREAD_NAME=y

# Thread runtime statistics (optional, for profiling)
# CONFIG_THREAD_RUNTIME_STATS=y

# -----------------------------------------------------------------------------
# MEMORY MANAGEMENT
# -----------------------------------------------------------------------------

# Heap size for dynamic allocation (k_malloc)
# Modbus library uses static buffers, so heap is mainly for Zephyr internals
CONFIG_HEAP_MEM_POOL_SIZE=4096

# Enable stack canaries for overflow detection (development only)
# Disable in production to save ROM
CONFIG_STACK_CANARIES=y

# -----------------------------------------------------------------------------
# LOGGING
# -----------------------------------------------------------------------------

# Enable logging subsystem
CONFIG_LOG=y

# Log level: 0=OFF, 1=ERR, 2=WRN, 3=INF, 4=DBG
CONFIG_LOG_DEFAULT_LEVEL=3

# Buffered logging (for better real-time performance)
CONFIG_LOG_MODE_DEFERRED=y

# Log buffer size (increase if logs are dropped)
CONFIG_LOG_BUFFER_SIZE=2048

# Enable hexdump support (for Modbus frame inspection)
CONFIG_LOG_BUFFER_SIZE=4096

# Log backend: UART (console)
CONFIG_LOG_BACKEND_UART=y

# Disable RTT backend (if not using Segger J-Link)
# CONFIG_LOG_BACKEND_RTT=n

# -----------------------------------------------------------------------------
# UART DRIVER
# -----------------------------------------------------------------------------

# Enable UART driver
CONFIG_UART=y

# Enable interrupt-driven UART API (required for uart_irq_callback_set)
CONFIG_UART_INTERRUPT_DRIVEN=y

# UART buffer sizes (for RX/TX FIFOs)
# Adjust based on Modbus frame size (max 256 bytes)
CONFIG_UART_0_NRF_TX_BUFFER_SIZE=256
CONFIG_UART_0_NRF_RX_BUFFER_SIZE=256

# Enable UART console (for LOG_BACKEND_UART)
CONFIG_CONSOLE=y
CONFIG_UART_CONSOLE=y

# -----------------------------------------------------------------------------
# GPIO DRIVER (for LED status indicator)
# -----------------------------------------------------------------------------

# Enable GPIO driver
CONFIG_GPIO=y

# -----------------------------------------------------------------------------
# MODBUS LIBRARY CONFIGURATION
# -----------------------------------------------------------------------------

# Modbus profile: LEAN (minimal features for client-only)
# Options: FULL, LEAN, TINY
CONFIG_MODBUS_PROFILE=LEAN

# Enable Modbus RTU transport
CONFIG_MODBUS_RTU_ENABLED=y

# Disable unused transports to save ROM
CONFIG_MODBUS_ASCII_ENABLED=n
CONFIG_MODBUS_TCP_ENABLED=n

# Enable Modbus function codes
CONFIG_MODBUS_FC03_ENABLED=y  # Read Holding Registers
CONFIG_MODBUS_FC04_ENABLED=y  # Read Input Registers
CONFIG_MODBUS_FC06_ENABLED=y  # Write Single Register
CONFIG_MODBUS_FC16_ENABLED=y  # Write Multiple Registers

# Disable server-only function codes to save ROM
CONFIG_MODBUS_FC01_ENABLED=n  # Read Coils
CONFIG_MODBUS_FC02_ENABLED=n  # Read Discrete Inputs
CONFIG_MODBUS_FC05_ENABLED=n  # Write Single Coil
CONFIG_MODBUS_FC15_ENABLED=n  # Write Multiple Coils

# -----------------------------------------------------------------------------
# TIMING AND TIMERS
# -----------------------------------------------------------------------------

# System tick frequency (Hz)
# 1000 Hz = 1ms tick (required for Modbus T1.5/T3.5 timing accuracy)
CONFIG_SYS_CLOCK_TICKS_PER_SEC=1000

# Enable kernel timers (k_timer_*)
CONFIG_TIMER=y

# -----------------------------------------------------------------------------
# NETWORKING (DISABLED - RTU uses UART, not TCP)
# -----------------------------------------------------------------------------

CONFIG_NETWORKING=n

# -----------------------------------------------------------------------------
# DEBUGGING (enable for development, disable for production)
# -----------------------------------------------------------------------------

# Enable assertions (catches bugs early)
# Disable in production to save ROM
CONFIG_ASSERT=y

# Enable DEBUG build (adds symbols, disables optimizations)
# For production, use "west build -b <board> -- -DCMAKE_BUILD_TYPE=Release"
# CONFIG_DEBUG=y

# Enable GDB stub (for remote debugging via JTAG)
# CONFIG_DEBUG_THREAD_INFO=y

# -----------------------------------------------------------------------------
# OPTIMIZATION
# -----------------------------------------------------------------------------

# Optimization level
# -Os: Optimize for size (default)
# -O2: Optimize for speed
# -O3: Aggressive optimization
CONFIG_SIZE_OPTIMIZATIONS=y

# Link-time optimization (LTO) - reduces ROM size by ~10%
# May increase build time
CONFIG_LTO=y

# Remove unused symbols
CONFIG_LINKER_ORPHAN_SECTION_PLACE=y

# -----------------------------------------------------------------------------
# POWER MANAGEMENT (optional, for battery-powered devices)
# -----------------------------------------------------------------------------

# Enable power management
# CONFIG_PM=y

# Enable device power management
# CONFIG_PM_DEVICE=y

# CPU idle sleep mode
# CONFIG_PM_POLICY_DEFAULT=y

# -----------------------------------------------------------------------------
# BOARD-SPECIFIC OVERRIDES
# -----------------------------------------------------------------------------

# Example for nRF52840 DK:
# - Use UART0 for Modbus
# - Use UART1 for console/logging (to avoid conflict)
# 
# In boards/nrf52840dk_nrf52840.overlay:
# / {
#     aliases {
#         modbus-uart = &uart0;
#         log-uart = &uart1;
#     };
# };

# Example for STM32 Nucleo F4:
# - Use USART1 for Modbus
# - Use USART2 for console (ST-Link virtual COM port)

# -----------------------------------------------------------------------------
# NOTES FOR CUSTOMIZATION
# -----------------------------------------------------------------------------

# 1. UART Configuration:
#    - Modbus requires dedicated UART (not shared with console)
#    - Use devicetree overlay to define "modbus-uart" alias
#    - Adjust baud rate in main.c (default 9600)
#
# 2. Memory Constraints:
#    - RAM usage: ~4KB heap + 2KB main stack + 2KB workqueue = 8KB total
#    - ROM usage: ~20KB (Zephyr kernel + Modbus lib + example code)
#    - For ultra-low-memory MCUs (<32KB RAM), reduce stack sizes
#
# 3. Real-Time Performance:
#    - CONFIG_SYS_CLOCK_TICKS_PER_SEC=1000 ensures 1ms timing accuracy
#    - Use CONFIG_PREEMPT_ENABLED=y (default) for responsive ISRs
#    - Consider CONFIG_TIMESLICING=n to reduce jitter
#
# 4. Logging in Production:
#    - Disable logging to save ROM/RAM: CONFIG_LOG=n
#    - Or set CONFIG_LOG_DEFAULT_LEVEL=1 (errors only)
#    - Use CONFIG_LOG_MODE_MINIMAL for smallest footprint
#
# 5. Power Optimization:
#    - Enable CONFIG_PM=y and implement idle hooks
#    - Use k_sleep() in app_thread to allow CPU to sleep
#    - Configure UART with wake-on-RX if supported by hardware
