name: CI

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: linux-gcc-debug
            os: ubuntu-latest
            preset: host-debug
            cmake_args: "-DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++"
          - name: linux-clang-asan
            os: ubuntu-latest
            preset: host-asan
            cmake_args: "-DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++"
          - name: windows-msvc
            os: windows-latest
            preset: host-debug
            cmake_args: ""
    steps:
      - uses: actions/checkout@v4
      - name: Install build dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build clang lld gcc g++ python3-pip
        shell: bash
      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@v3
      - name: Setup MSVC environment
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
      - name: Configure
        if: runner.os != 'Windows'
        run: cmake --preset ${{ matrix.preset }} ${{ matrix.cmake_args }}
        shell: bash
      - name: Configure (Windows)
        if: runner.os == 'Windows'
        run: cmake --preset ${{ matrix.preset }} ${{ matrix.cmake_args }}
        shell: pwsh
      - name: Build
        if: runner.os != 'Windows'
        run: cmake --build --preset ${{ matrix.preset }}
        shell: bash
      - name: Build (Windows)
        if: runner.os == 'Windows'
        run: cmake --build --preset ${{ matrix.preset }}
        shell: pwsh
      - name: Run tests
        if: runner.os != 'Windows'
        run: ctest --output-on-failure --test-dir build/${{ matrix.preset }}
        shell: bash
      - name: Run tests (Windows)
        if: runner.os == 'Windows'
        run: ctest --output-on-failure --test-dir build/${{ matrix.preset }}
        shell: pwsh

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@v3
      - name: Install documentation dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y doxygen graphviz python3-pip
          python3 -m pip install --upgrade pip
          python3 -m pip install sphinx breathe
        shell: bash
      - name: Configure docs preset
        run: cmake --preset docs
        shell: bash
      - name: Build documentation
        run: cmake --build --preset docs --target doc
        shell: bash

  tcp-integration:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Install integration dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build gcc g++ clang git cmake build-essential libmodbus-dev
          python3 -m pip install --upgrade pip
          python3 -m pip install pymodbus==2.5.3
        shell: bash
      - name: Configure project (host-debug)
        run: cmake --preset host-debug
        shell: bash
      - name: Build TCP client CLI
        run: cmake --build --preset host-debug --target modbus_tcp_client_cli
        shell: bash
      - name: Build modpoll
        run: |
          git clone --depth 1 https://github.com/epsilonrt/modpoll.git third_party/modpoll
          cmake -S third_party/modpoll -B third_party/modpoll/build -DCMAKE_BUILD_TYPE=Release
          cmake --build third_party/modpoll/build --parallel
        shell: bash
      - name: Start Modbus TCP server
        run: |
          python3 scripts/ci/modbus_tcp_server.py &
          echo $! > server.pid
          sleep 3
        shell: bash
      - name: Run library client against server
        run: build/host-debug/examples/modbus_tcp_client_cli --host 127.0.0.1 --port 15020 --unit 1 --register 0 --count 2 --expect 100,200
        shell: bash
      - name: Validate with mbtget
        run: |
          mbtget -m tcp -a 1 -r 0 -n 2 127.0.0.1 -p 15020 | tee /tmp/mbtget.log
          grep -q "100" /tmp/mbtget.log
          grep -q "200" /tmp/mbtget.log
        shell: bash
      - name: Validate with modpoll
        run: |
          MODPOLL_BIN=$(find third_party/modpoll/build -type f -name modpoll -perm -111 | head -n 1)
          chmod +x "$MODPOLL_BIN"
          "$MODPOLL_BIN" -m tcp -a 1 -r 0 -c 2 127.0.0.1 -p 15020 | tee /tmp/modpoll.log
          grep -q "100" /tmp/modpoll.log
          grep -q "200" /tmp/modpoll.log
        shell: bash
      - name: Stop Modbus TCP server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill "$(cat server.pid)" || true
          fi
        shell: bash
