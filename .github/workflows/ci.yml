name: CI

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:


permissions:
  contents: write

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install clang-tidy
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build clang clang-tidy
        shell: bash
      - name: Configure (clang-tidy)
        run: cmake -S . -B build/clang-tidy -G Ninja \
          -DCMAKE_BUILD_TYPE=Debug \
          -DMODBUS_ENABLE_TESTS=ON \
          -DCMAKE_C_COMPILER=clang \
          -DCMAKE_CXX_COMPILER=clang++ \
          -DCMAKE_C_CLANG_TIDY=clang-tidy
        shell: bash
      - name: Run clang-tidy build
        run: cmake --build build/clang-tidy --parallel
        shell: bash

  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: linux-gcc-debug
            os: ubuntu-latest
            preset: host-debug
            cmake_args: "-DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++"
          - name: linux-clang-asan
            os: ubuntu-latest
            preset: host-asan
            cmake_args: "-DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++"
          # TSAN disabled: takes >25min on CI (10-50x slower). Run locally if needed.
          # - name: linux-clang-tsan
          #   os: ubuntu-latest
          #   preset: host-tsan
          #   cmake_args: "-DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++"
          - name: windows-msvc
            os: windows-latest
            preset: host-debug
            cmake_args: ""
    steps:
      - uses: actions/checkout@v4
      - name: Install build dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build clang lld gcc g++ python3-pip
        shell: bash
      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@v3
      - name: Setup MSVC environment
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
      - name: Configure
        if: runner.os != 'Windows'
        run: cmake --preset ${{ matrix.preset }} ${{ matrix.cmake_args }}
        shell: bash
      - name: Configure (Windows)
        if: runner.os == 'Windows'
        run: cmake --preset ${{ matrix.preset }} ${{ matrix.cmake_args }}
        shell: pwsh
      - name: Build
        if: runner.os != 'Windows'
        run: cmake --build --preset ${{ matrix.preset }}
        shell: bash
      - name: Build (Windows)
        if: runner.os == 'Windows'
        run: cmake --build --preset ${{ matrix.preset }}
        shell: pwsh
      - name: Run tests
        if: runner.os != 'Windows'
        run: ctest --output-on-failure --test-dir build/${{ matrix.preset }}
        shell: bash
      - name: Run tests (Windows)
        if: runner.os == 'Windows'
        run: ctest --output-on-failure --test-dir build/${{ matrix.preset }}
        shell: pwsh

  coverage:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Install coverage toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build gcc g++ lcov
        shell: bash
      - name: Configure coverage preset
        run: cmake --preset host-coverage -DMODBUS_BUILD_EXAMPLES=ON
        shell: bash
      - name: Generate coverage report
        run: cmake --build --preset host-coverage --target coverage
        shell: bash
      - name: Upload coverage HTML
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: build/host-coverage/coverage_html
        if: success()

  footprint:
    if: ${{ false }} # Temporarily disabled; run scripts/ci/report_footprint.py locally and commit the snapshot
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Install footprint tooling
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            ninja-build \
            gcc \
            g++ \
            binutils \
            python3 \
            curl \
            gcc-arm-none-eabi \
            binutils-arm-none-eabi \
            gcc-riscv64-unknown-elf \
            binutils-riscv64-unknown-elf
        shell: bash
      - name: Install cross newlib runtimes
        run: |
          set -euo pipefail
          BASE_URL="https://deb.debian.org/debian/pool/main/n/newlib"
          declare -a packages=(
            "libnewlib-dev"
            "libnewlib-arm-none-eabi"
          )
          declare -a downloads=()
          index=$(curl -fsSL "${BASE_URL}/")
          for pkg in "${packages[@]}"; do
            filename=$(printf '%s' "$index" | grep -o "${pkg}_[^\" ]*all\\.deb" | sort -uV | tail -n1 || true)
            if [[ -z "$filename" ]]; then
              echo "::error::Unable to locate package ${pkg} under ${BASE_URL}" >&2
              exit 1
            fi
            curl -fsSL -o "/tmp/${filename}" "${BASE_URL}/${filename}"
            downloads+=("/tmp/${filename}")
          done
          sudo dpkg -i "${downloads[@]}"
        shell: bash
      - name: Generate footprint snapshot
        run: |
          python3 scripts/ci/report_footprint.py \
            --profiles TINY LEAN FULL \
            --targets host stm32g0 esp32c3 \
            --generator Ninja \
            --output build/footprint/host.json \
            --update-readme README.md
        shell: bash
      - name: Ensure README footprint table is current
        run: |
          if ! git diff --quiet README.md; then
            echo "::error::Footprint snapshot in README.md is stale. Run" \
                 "'python3 scripts/ci/report_footprint.py --profiles TINY LEAN FULL --generator Ninja --update-readme README.md'" \
                 "locally and commit the result." >&2
            git diff README.md >&2
            exit 1
          fi
        shell: bash
      - name: Upload footprint metrics
        uses: actions/upload-artifact@v4
        with:
          name: footprint-host
          path: build/footprint/host.json

  fuzz:
    if: ${{ false }} # Temporarily disabled due to known toolchain issues
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Install fuzzing toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build clang llvm
          CLANG_MAJ=$(clang -dumpversion | cut -d. -f1)
          set +e
          success_pkg=0
          for ver in "$CLANG_MAJ" 19 18 17 16 15 14; do
            if sudo apt-get install -y "libclang-rt-${ver}-dev"; then
              echo "Installed libclang-rt-${ver}-dev"
              success_pkg=1
              break
            fi
          done
          set -e
          if [ "$success_pkg" -ne 1 ]; then
            echo "::error::Failed to install a compatible libclang-rt runtime package" >&2
            exit 1
          fi
        shell: bash
      - name: Configure fuzz preset
        run: cmake --preset host-fuzz -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
        shell: bash
      - name: Build fuzzers
        run: cmake --build --preset host-fuzz --target modbus_pdu_fuzz
        shell: bash
      - name: Smoke test fuzz target
        run: build/host-fuzz/fuzz/modbus_pdu_fuzz -runs=1000 -seed=1337
        shell: bash

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@v3
      - name: Install documentation dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y doxygen graphviz python3-pip
          python3 -m pip install --upgrade pip
          python3 -m pip install sphinx breathe sphinx-rtd-theme
        shell: bash
      - name: Configure docs preset
        run: cmake --preset host-docs
        shell: bash
      - name: Build documentation
        run: cmake --build --preset docs
        shell: bash
      - name: Stage site for GitHub Pages
        run: |
          rm -rf build/host-docs/gh-pages
          mkdir -p build/host-docs/gh-pages/docs
          cp -a build/host-docs/docs/html/. build/host-docs/gh-pages/docs/
        shell: bash
      - name: Deploy GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: build/host-docs/gh-pages
          publish_branch: gh-pages
          force_orphan: true
          enable_jekyll: false

  tcp-integration:
    if: ${{ false }} # Temporarily disabled pending investigation of failures
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Install integration dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build gcc g++ clang git cmake build-essential libmodbus-dev
          python3 -m pip install --upgrade pip
          python3 -m pip install pymodbus==2.5.3 modpoll
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
        shell: bash
      - name: Configure project (host-debug-examples)
        run: cmake --preset host-debug-examples
        shell: bash
      - name: Build TCP client CLI
        run: cmake --build --preset host-debug-examples --target modbus_tcp_client_cli
        shell: bash
      - name: Verify modpoll installation
        run: modpoll --version
        shell: bash
      - name: Start Modbus TCP server
        run: |
          python3 scripts/ci/modbus_tcp_server.py &
          echo $! > server.pid
          sleep 3
        shell: bash
      - name: Run library client against server
        run: build/host-debug-examples/examples/modbus_tcp_client_cli --host 127.0.0.1 --port 15020 --unit 1 --register 0 --count 2 --expect 100,200
        shell: bash
      - name: Validate with pymodbus client
        run: |
          python3 - <<'PY'
          from pymodbus.client.sync import ModbusTcpClient

          client = ModbusTcpClient("127.0.0.1", port=15020)
          if not client.connect():
              raise SystemExit("Failed to connect to Modbus TCP server")

          response = client.read_holding_registers(address=0, count=2, unit=1)
          client.close()

          if response.isError():
              raise SystemExit(f"Modbus read failed: {response}")

          expected = [100, 200]
          if response.registers != expected:
              raise SystemExit(f"Unexpected register values: {response.registers} != {expected}")
          PY
        shell: bash
      - name: Validate with modpoll
        run: |
          modpoll -m tcp -a 1 -r 0 -c 2 127.0.0.1 -p 15020 | tee /tmp/modpoll.log
          grep -q "100" /tmp/modpoll.log
          grep -q "200" /tmp/modpoll.log
        shell: bash
      - name: Stop Modbus TCP server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill "$(cat server.pid)" || true
          fi
        shell: bash

  interop-matrix:
    name: Gate 26 - Interoperability Matrix
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build interop Docker image
        run: docker build -t modbus-interop -f interop/Dockerfile .
        timeout-minutes: 15
      
      - name: Create output directories
        run: |
          mkdir -p interop/pcaps interop/results
      
      - name: Run interop tests (baseline)
        run: |
          docker run --rm \
            -v $(pwd)/interop/results:/results \
            modbus-interop test-simple
        timeout-minutes: 5
      
      - name: Display baseline test results
        if: always()
        run: |
          if [ -f interop/results/interop_results.json ]; then
            echo "=== Baseline Test Results ==="
            cat interop/results/interop_results.json | python3 -m json.tool
          else
            echo "ERROR: No baseline results file found"
            exit 1
          fi
      
      - name: Run expanded interop tests (all function codes + implementations)
        run: |
          docker run --rm \
            -v $(pwd)/interop/results:/results \
            -v $(pwd)/interop/pcaps:/results/pcaps \
            modbus-interop test-expanded
        timeout-minutes: 15
        
      - name: Display expanded test results
        if: always()
        run: |
          if [ -f interop/results/interop_results.json ]; then
            echo "=== Expanded Interop Test Results ==="
            cat interop/results/interop_results.json | python3 -m json.tool
            
            # Check pass rate
            passed=$(cat interop/results/interop_results.json | python3 -c "import sys,json; print(json.load(sys.stdin)['passed'])")
            total=$(cat interop/results/interop_results.json | python3 -c "import sys,json; print(json.load(sys.stdin)['total'])")
            echo ""
            echo "Pass Rate: $passed/$total"
            
            # Gate 26 requires 100% pass rate
            if [ "$passed" != "$total" ]; then
              echo "ERROR: Gate 26 requires 100% passing tests"
              exit 1
            fi
          else
            echo "ERROR: No expanded results file found"
            exit 1
          fi
      
      - name: Upload interop artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: interop-results
          path: |
            interop/results/*.json
            interop/pcaps/*.pcap
          retention-days: 30
      
      - name: Check for test failures
        run: |
          if [ -f interop/results/interop_results.json ]; then
            python3 <<'EOF'
          import json, sys
          with open('interop/results/interop_results.json') as f:
              data = json.load(f)
              if data['failed'] > 0:
                  print(f"ERROR: {data['failed']} interop tests failed!")
                  sys.exit(1)
              else:
                  print(f"SUCCESS: All {data['passed']} tests passed!")
          EOF
          else
            echo "ERROR: No interop results found!"
            exit 1
          fi

  # Modbus TCP client/server integration test
